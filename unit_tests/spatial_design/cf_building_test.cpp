#ifndef BOOST_TEST_MODULE
#define BOOST_TEST_MODULE "cf_building"

#endif

#include <boost/test/included/unit_test.hpp>

#include <bso/spatial_design/ms_building.hpp>
#include <bso/spatial_design/cf_building.hpp>

/*
BOOST_TEST()
BOOST_REQUIRE_THROW(function, std::domain_error)
BOOST_REQUIRE(!s[8].dominates(s[9]) && !s[9].dominates(s[8]))
BOOST_CHECK_EQUAL_COLLECTIONS(a.begin(), a.end(), b.begin(), b.end());
*/

namespace spatial_design_test {
using namespace bso::spatial_design;
using namespace bso::spatial_design::conformal;

BOOST_AUTO_TEST_SUITE( cf_building_tests )
	
	BOOST_AUTO_TEST_CASE( cf_test_1_txt )
	{
		ms_building ms("spatial_design/cf_test_1.txt");
		cf_building_model cf(ms);
		
		std::vector<bso::utilities::geometry::vertex> checkVertices = {
			{0,0,0},{0,0,1000},{0,1000,1000},{0,1000,0},
			{1000,0,0},{1000,0,1000},{1000,1000,1000},{1000,1000,0}
		};
		std::vector<bso::utilities::geometry::line_segment> checkLines = {
			{{0,0,0},{0,0,1000}},{{0,1000,1000},{0,0,1000}},{{0,1000,1000},{0,1000,0}},{{0,0,0},{0,1000,0}},
			{{1000,0,0},{1000,0,1000}},{{1000,1000,1000},{1000,0,1000}},{{1000,1000,1000},{1000,1000,0}},{{1000,0,0},{1000,1000,0}},
			{{0,0,0},{1000,0,0}},{{0,0,1000},{1000,0,1000}},{{0,1000,1000},{1000,1000,1000}},{{0,1000,0},{1000,1000,0}}
		};
		std::vector<bso::utilities::geometry::quadrilateral> checkRectangles = {
			{{0,0,0},{0,0,1000},{0,1000,1000},{0,1000,0}},
			{{1000,0,0},{1000,0,1000},{1000,1000,1000},{1000,1000,0}},
			{{0,0,0},{1000,0,0},{1000,1000,0},{0,1000,0}},
			{{0,0,1000},{1000,0,1000},{1000,1000,1000},{0,1000,1000}},
			{{0,0,0},{0,0,1000},{1000,0,1000},{1000,0,0}},
			{{0,1000,0},{0,1000,1000},{1000,1000,1000},{1000,1000,0}}
		};
		std::vector<bso::utilities::geometry::quad_hexahedron> checkCuboids = {
			{{0,0,0},{0,0,1000},{0,1000,1000},{0,1000,0},
			{1000,0,0},{1000,0,1000},{1000,1000,1000},{1000,1000,0}}
		};
		
		BOOST_REQUIRE(checkVertices.size() == cf.cfVertices().size());
		for (const auto& i : checkVertices)
		{
			bool found = false;
			for (const auto& j : cf.cfVertices())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find vertex: " << i.transpose() << std::endl; 
			BOOST_REQUIRE(found);
		}
		
		BOOST_REQUIRE(checkLines.size() == cf.cfLines().size());
		for (const auto& i : checkLines)
		{
			bool found = false;
			for (const auto& j : cf.cfLines())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find line: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}

		BOOST_REQUIRE(checkRectangles.size() == cf.cfRectangles().size());
		for (const auto& i : checkRectangles)
		{
			bool found = false;
			for (const auto& j : cf.cfRectangles())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find rectangle: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}
		
		BOOST_REQUIRE(checkCuboids.size() == cf.cfCuboids().size());
		for (const auto& i : checkCuboids)
		{
			bool found = false;
			for (const auto& j : cf.cfCuboids())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find cuboid: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}
		std::stringstream typeAssignments;
		for (const auto& i : cf.cfSpaces()) typeAssignments << i->getSpaceType();
		for (const auto& i : cf.cfSurfaces()) typeAssignments << i->getSurfaceType();

		BOOST_REQUIRE(typeAssignments.str() == "ADCBEGF");
	}
	
	BOOST_AUTO_TEST_CASE( cf_test_2_txt )
	{
		ms_building ms("spatial_design/cf_test_2.txt");
		cf_building_model cf(ms);
		
		std::vector<bso::utilities::geometry::vertex> checkVertices = {
			{0,0,0},{1000,0,0},{1000,1000,0},{0,1000,0},
			{0,0,1000},{1000,0,1000},{1000,1000,1000},{0,1000,1000},
			{500,1000,0},{500,2000,0},{0,2000,0},{500,1000,1000},
			{500,2000,1000},{0,2000,1000},{500,0,0},{500,0,1000}
		};
		std::vector<bso::utilities::geometry::line_segment> checkLines = {
			{{1000,0,0},{1000,1000,0}},{{0,1000,0},{0,0,0}},
			{{0,0,0},{0,0,1000}},{{1000,0,0},{1000,0,1000}},
			{{1000,1000,0},{1000,1000,1000}},{{0,1000,0},{0,1000,1000}},
			{{1000,0,1000},{1000,1000,1000}},{{0,1000,1000},{0,0,1000}},
			{{0,1000,0},{500,1000,0}},{{500,1000,0},{500,2000,0}},
			{{500,2000,0},{0,2000,0}},{{0,2000,0},{0,1000,0}},
			{{500,1000,0},{500,1000,1000}},{{500,2000,0},{500,2000,1000}},
			{{0,2000,0},{0,2000,1000}},{{0,1000,1000},{500,1000,1000}},
			{{500,1000,1000},{500,2000,1000}},{{500,2000,1000},{0,2000,1000}},
			{{0,2000,1000},{0,1000,1000}},{{500,1000,0},{500,0,0}},
			{{500,0,0},{500,0,1000}},{{500,0,1000},{500,1000,1000}},
			{{500,1000,0},{1000,1000,0}},{{500,0,0},{1000,0,0}},
			{{500,0,1000},{1000,0,1000}},{{500,1000,1000},{1000,1000,1000}},
			{{500,0,0},{0,0,0}},{{500,0,1000},{0,0,1000}}
		};
		std::vector<bso::utilities::geometry::quadrilateral> checkRectangles = {
			{{1000,0,0},{1000,1000,0},{1000,1000,1000},{1000,0,1000}},
			{{0,1000,0},{0,0,0},{0,0,1000},{0,1000,1000}},
			{{0,1000,0},{500,1000,0},{500,1000,1000},{0,1000,1000}},
			{{500,1000,0},{500,2000,0},{500,2000,1000},{500,1000,1000}},
			{{500,2000,0},{0,2000,0},{0,2000,1000},{500,2000,1000}},
			{{0,2000,0},{0,1000,0},{0,1000,1000},{0,2000,1000}},
			{{0,1000,0},{500,1000,0},{500,2000,0},{0,2000,0}},
			{{0,1000,1000},{500,1000,1000},{500,2000,1000},{0,2000,1000}},
			{{500,1000,0},{500,0,0},{1000,0,0},{1000,1000,0}},
			{{500,0,0},{500,0,1000},{1000,0,1000},{1000,0,0}},
			{{500,0,1000},{500,1000,1000},{1000,1000,1000},{1000,0,1000}},
			{{500,1000,1000},{500,1000,0},{1000,1000,0},{1000,1000,1000}},
			{{500,1000,0},{500,0,0},{500,0,1000},{500,1000,1000}},
			{{500,1000,0},{500,0,0},{0,0,0},{0,1000,0}},
			{{500,0,0},{500,0,1000},{0,0,1000},{0,0,0}},
			{{500,0,1000},{500,1000,1000},{0,1000,1000},{0,0,1000}}
		};
		std::vector<bso::utilities::geometry::quad_hexahedron> checkCuboids = {
			{{0,1000,0},{500,1000,0},{500,2000,0},{0,2000,0},{0,1000,1000},{500,1000,1000},{500,2000,1000},{0,2000,1000}},
			{{500,1000,0},{500,0,0},{500,0,1000},{500,1000,1000},{1000,1000,0},{1000,0,0},{1000,0,1000},{1000,1000,1000}},
			{{500,1000,0},{500,0,0},{500,0,1000},{500,1000,1000},{0,1000,0},{0,0,0},{0,0,1000},{0,1000,1000}}
		};
		
		BOOST_REQUIRE(checkVertices.size() == cf.cfVertices().size());
		for (const auto& i : checkVertices)
		{
			bool found = false;
			for (const auto& j : cf.cfVertices())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find vertex: " << i.transpose() << std::endl; 
			BOOST_REQUIRE(found);
		}
		
		BOOST_REQUIRE(checkLines.size() == cf.cfLines().size());
		for (const auto& i : checkLines)
		{
			bool found = false;
			for (const auto& j : cf.cfLines())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find line: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}

		BOOST_REQUIRE(checkRectangles.size() == cf.cfRectangles().size());
		for (const auto& i : checkRectangles)
		{
			bool found = false;
			for (const auto& j : cf.cfRectangles())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find rectangle: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}
		
		BOOST_REQUIRE(checkCuboids.size() == cf.cfCuboids().size());
		for (const auto& i : checkCuboids)
		{
			bool found = false;
			for (const auto& j : cf.cfCuboids())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find cuboid: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}
	}
	
	BOOST_AUTO_TEST_CASE( cf_test_3_txt )
	{
		ms_building ms("spatial_design/cf_test_3.txt");
		cf_building_model cf(ms);
		
		std::vector<bso::utilities::geometry::vertex> checkVertices = {
			{0,0,0},{1000,0,0},{1000,1000,0},{0,1000,0},{0,0,1000},
			{1000,0,1000},{1000,1000,1000},{0,1000,1000},{1500,0,0},
			{1500,2000,0},{1000,2000,0},{1000,0,1500},{1500,0,1500},
			{1500,2000,1500},{1000,2000,1500},{2500,2000,0},{2500,3000,0},
			{1000,3000,0},{2500,2000,1500},{2500,3000,1500},{1000,3000,1500},
			{2000,0,0},{2500,0,0},{2000,2000,0},{2000,0,1500},{2500,0,1500},
			{2000,2000,1500},{1500,1000,0},{1500,1000,1500},{1000,1000,1500},
			{1500,1000,1000},{1500,0,1000},{1000,2000,1000},{1500,2000,1000},
			{2500,2000,1000},{2500,3000,1000},{1000,3000,1000},{2000,0,1000},
			{2500,0,1000},{2000,2000,1000},{1500,3000,1000},{1500,3000,0},
			{1500,3000,1500},{2000,3000,1000},{2000,3000,0},{2000,3000,1500}
		};
		std::vector<bso::utilities::geometry::line_segment> checkLines = {
			{{0,0,0},{1000,0,0}},{{1000,0,0},{1000,1000,0}},
			{{1000,1000,0},{0,1000,0}},{{0,1000,0},{0,0,0}},
			{{0,0,0},{0,0,1000}},{{1000,0,0},{1000,0,1000}},
			{{1000,1000,0},{1000,1000,1000}},{{0,1000,0},{0,1000,1000}},
			{{0,0,1000},{1000,0,1000}},{{1000,0,1000},{1000,1000,1000}},
			{{1000,1000,1000},{0,1000,1000}},{{0,1000,1000},{0,0,1000}},
			{{1000,0,0},{1500,0,0}},{{1500,2000,0},{1000,2000,0}},
			{{1000,0,1500},{1500,0,1500}},{{1500,2000,1500},{1000,2000,1500}},
			{{2500,2000,0},{2500,3000,0}},{{1000,3000,0},{1000,2000,0}},
			{{2500,2000,1500},{2500,3000,1500}},{{1000,3000,1500},{1000,2000,1500}},
			{{2000,0,0},{2500,0,0}},{{2500,0,0},{2500,2000,0}},
			{{2500,2000,0},{2000,2000,0}},{{2000,2000,0},{2000,0,0}},
			{{2000,0,1500},{2500,0,1500}},{{2500,0,1500},{2500,2000,1500}},
			{{2500,2000,1500},{2000,2000,1500}},{{2000,2000,1500},{2000,0,1500}},
			{{1000,1000,0},{1500,1000,0}},{{1500,1000,0},{1500,1000,1500}},
			{{1500,1000,1500},{1000,1000,1500}},{{1000,1000,1500},{1000,1000,0}},
			{{1500,1000,0},{1500,0,0}},{{1500,1000,1500},{1500,0,1500}},
			{{1000,1000,1500},{1000,0,1500}},{{1000,1000,0},{1000,2000,0}},
			{{1500,1000,0},{1500,2000,0}},{{1500,1000,1500},{1500,2000,1500}},
			{{1000,1000,1500},{1000,2000,1500}},{{1000,1000,1000},{1500,1000,1000}},
			{{1500,1000,1000},{1500,0,1000}},{{1500,0,1000},{1000,0,1000}},
			{{1500,1000,1000},{1500,1000,0}},{{1500,0,1000},{1500,0,0}},
			{{1000,0,1000},{1000,0,1500}},{{1000,1000,1000},{1000,1000,1500}},
			{{1500,1000,1000},{1500,1000,1500}},{{1500,0,1000},{1500,0,1500}},
			{{1000,1000,1000},{1000,2000,1000}},{{1000,2000,1000},{1000,2000,0}},
			{{1000,2000,1000},{1000,2000,1500}},{{1500,1000,1000},{1500,2000,1000}},
			{{1500,2000,1000},{1000,2000,1000}},{{1500,2000,1000},{1500,2000,0}},
			{{1500,2000,1000},{1500,2000,1500}},{{1000,2000,1000},{2500,2000,1000}},
			{{2500,2000,1000},{2500,3000,1000}},{{2500,3000,1000},{1000,3000,1000}},
			{{1000,3000,1000},{1000,2000,1000}},{{2500,2000,1000},{2500,2000,0}},
			{{2500,3000,1000},{2500,3000,0}},{{1000,3000,1000},{1000,3000,0}},
			{{2500,2000,1000},{2500,2000,1500}},{{2500,3000,1000},{2500,3000,1500}},
			{{1000,3000,1000},{1000,3000,1500}},{{2500,2000,1000},{2500,0,1000}},
			{{2500,0,1000},{2000,0,1000}},{{2000,0,1000},{2000,2000,1000}},
			{{2000,2000,1000},{2500,2000,1000}},{{2500,0,1000},{2500,0,0}},
			{{2000,0,1000},{2000,0,0}},{{2000,2000,1000},{2000,2000,0}},
			{{2500,0,1000},{2500,0,1500}},{{2000,0,1000},{2000,0,1500}},
			{{2000,2000,1000},{2000,2000,1500}},{{1500,2000,1000},{1500,3000,1000}},
			{{1500,3000,1000},{1500,3000,0}},{{1500,3000,0},{1500,2000,0}},
			{{1500,2000,1000},{2500,2000,1000}},{{1500,3000,1000},{2500,3000,1000}},
			{{1500,3000,1000},{1000,3000,1000}},{{1500,3000,0},{1000,3000,0}},
			{{1500,3000,1000},{1500,3000,1500}},{{1500,3000,1500},{1500,2000,1500}},
			{{1500,3000,1500},{1000,3000,1500}},{{2000,2000,1000},{2000,3000,1000}},
			{{2000,3000,1000},{2000,3000,0}},{{2000,3000,0},{2000,2000,0}},
			{{2000,2000,0},{1500,2000,0}},{{2000,2000,1000},{1500,2000,1000}},
			{{2000,3000,1000},{1500,3000,1000}},{{2000,3000,0},{1500,3000,0}},
			{{2000,3000,1000},{2500,3000,1000}},{{2000,3000,0},{2500,3000,0}},
			{{2000,2000,1500},{1500,2000,1500}},{{2000,3000,1000},{2000,3000,1500}},
			{{2000,3000,1500},{2000,2000,1500}},{{2000,3000,1500},{1500,3000,1500}},
			{{2000,3000,1500},{2500,3000,1500}}
		};
		std::vector<bso::utilities::geometry::quadrilateral> checkRectangles = {
			{{0,0,0},{1000,0,0},{1000,0,1000},{0,0,1000}},
			{{1000,0,0},{1000,1000,0},{1000,1000,1000},{1000,0,1000}},
			{{1000,1000,0},{0,1000,0},{0,1000,1000},{1000,1000,1000}},
			{{0,1000,0},{0,0,0},{0,0,1000},{0,1000,1000}},
			{{0,0,0},{1000,0,0},{1000,1000,0},{0,1000,0}},
			{{0,0,1000},{1000,0,1000},{1000,1000,1000},{0,1000,1000}},
			{{2000,0,0},{2500,0,0},{2500,2000,0},{2000,2000,0}},
			{{2000,0,1500},{2500,0,1500},{2500,2000,1500},{2000,2000,1500}},
			{{1000,1000,0},{1500,1000,0},{1500,0,0},{1000,0,0}},
			{{1500,1000,1500},{1000,1000,1500},{1000,0,1500},{1500,0,1500}},
			{{1000,1000,0},{1500,1000,0},{1500,1000,1500},{1000,1000,1500}},
			{{1000,1000,0},{1500,1000,0},{1500,2000,0},{1000,2000,0}},
			{{1500,1000,1500},{1000,1000,1500},{1000,2000,1500},{1500,2000,1500}},
			{{1000,1000,1000},{1500,1000,1000},{1500,1000,0},{1000,1000,0}},
			{{1500,1000,1000},{1500,0,1000},{1500,0,0},{1500,1000,0}},
			{{1500,0,1000},{1000,0,1000},{1000,0,0},{1500,0,0}},
			{{1000,0,1000},{1000,1000,1000},{1500,1000,1000},{1500,0,1000}},
			{{1000,0,1000},{1000,1000,1000},{1000,1000,1500},{1000,0,1500}},
			{{1000,1000,1000},{1500,1000,1000},{1500,1000,1500},{1000,1000,1500}},
			{{1500,1000,1000},{1500,0,1000},{1500,0,1500},{1500,1000,1500}},
			{{1500,0,1000},{1000,0,1000},{1000,0,1500},{1500,0,1500}},
			{{1000,1000,1000},{1000,2000,1000},{1000,2000,0},{1000,1000,0}},
			{{1000,1000,1000},{1000,2000,1000},{1000,2000,1500},{1000,1000,1500}},
			{{1500,1000,1000},{1500,2000,1000},{1500,2000,0},{1500,1000,0}},
			{{1500,2000,1000},{1000,2000,1000},{1000,2000,0},{1500,2000,0}},
			{{1000,1000,1000},{1500,1000,1000},{1500,2000,1000},{1000,2000,1000}},
			{{1500,1000,1000},{1500,2000,1000},{1500,2000,1500},{1500,1000,1500}},
			{{1500,2000,1000},{1000,2000,1000},{1000,2000,1500},{1500,2000,1500}},
			{{2500,2000,1000},{2500,3000,1000},{2500,3000,0},{2500,2000,0}},
			{{1000,3000,1000},{1000,2000,1000},{1000,2000,0},{1000,3000,0}},
			{{1000,2000,1000},{2500,2000,1000},{2500,3000,1000},{1000,3000,1000}},
			{{2500,2000,1000},{2500,3000,1000},{2500,3000,1500},{2500,2000,1500}},
			{{1000,3000,1000},{1000,2000,1000},{1000,2000,1500},{1000,3000,1500}},
			{{2500,2000,1000},{2500,0,1000},{2500,0,0},{2500,2000,0}},
			{{2500,0,1000},{2000,0,1000},{2000,0,0},{2500,0,0}},
			{{2000,0,1000},{2000,2000,1000},{2000,2000,0},{2000,0,0}},
			{{2000,2000,1000},{2500,2000,1000},{2500,2000,0},{2000,2000,0}},
			{{2500,2000,1000},{2500,0,1000},{2000,0,1000},{2000,2000,1000}},
			{{2500,2000,1000},{2500,0,1000},{2500,0,1500},{2500,2000,1500}},
			{{2500,0,1000},{2000,0,1000},{2000,0,1500},{2500,0,1500}},
			{{2000,0,1000},{2000,2000,1000},{2000,2000,1500},{2000,0,1500}},
			{{2000,2000,1000},{2500,2000,1000},{2500,2000,1500},{2000,2000,1500}},
			{{1500,2000,1000},{1500,3000,1000},{2500,3000,1000},{2500,2000,1000}},
			{{1500,2000,0},{1500,2000,1000},{1500,3000,1000},{1500,3000,0}},
			{{1500,2000,1000},{1500,3000,1000},{1000,3000,1000},{1000,2000,1000}},
			{{1500,3000,1000},{1500,3000,0},{1000,3000,0},{1000,3000,1000}},
			{{1500,3000,0},{1500,2000,0},{1000,2000,0},{1000,3000,0}},
			{{1500,2000,1000},{1500,3000,1000},{1500,3000,1500},{1500,2000,1500}},
			{{1500,3000,1000},{1500,3000,1500},{1000,3000,1500},{1000,3000,1000}},
			{{1500,3000,1500},{1500,2000,1500},{1000,2000,1500},{1000,3000,1500}},
			{{2000,2000,0},{2000,2000,1000},{1500,2000,1000},{1500,2000,0}},
			{{2000,2000,1000},{2000,3000,1000},{1500,3000,1000},{1500,2000,1000}},
			{{2000,3000,1000},{2000,3000,0},{1500,3000,0},{1500,3000,1000}},
			{{2000,3000,0},{2000,2000,0},{1500,2000,0},{1500,3000,0}},
			{{2000,2000,0},{2000,2000,1000},{2000,3000,1000},{2000,3000,0}},
			{{2000,2000,1000},{2000,3000,1000},{2500,3000,1000},{2500,2000,1000}},
			{{2000,3000,1000},{2000,3000,0},{2500,3000,0},{2500,3000,1000}},
			{{2000,3000,0},{2000,2000,0},{2500,2000,0},{2500,3000,0}},
			{{2000,2000,1000},{2000,2000,1500},{1500,2000,1500},{1500,2000,1000}},
			{{2000,3000,1000},{2000,3000,1500},{1500,3000,1500},{1500,3000,1000}},
			{{2000,3000,1500},{2000,2000,1500},{1500,2000,1500},{1500,3000,1500}},
			{{2000,2000,1000},{2000,3000,1000},{2000,3000,1500},{2000,2000,1500}},
			{{2000,3000,1000},{2000,3000,1500},{2500,3000,1500},{2500,3000,1000}},
			{{2000,3000,1500},{2000,2000,1500},{2500,2000,1500},{2500,3000,1500}}
		};
		std::vector<bso::utilities::geometry::quad_hexahedron> checkCuboids = {
			{{0,0,0},{1000,0,0},{1000,1000,0},{0,1000,0},{0,0,1000},{1000,0,1000},{1000,1000,1000},{0,1000,1000}},
			{{1000,0,1000},{1000,1000,1000},{1500,1000,1000},{1500,0,1000},{1000,0,0},{1000,1000,0},{1500,1000,0},{1500,0,0}},
			{{1000,0,1000},{1000,1000,1000},{1500,1000,1000},{1500,0,1000},{1000,0,1500},{1000,1000,1500},{1500,1000,1500},{1500,0,1500}},
			{{1000,1000,1000},{1500,1000,1000},{1500,2000,1000},{1000,2000,1000},{1000,1000,0},{1500,1000,0},{1500,2000,0},{1000,2000,0}},
			{{1000,1000,1000},{1500,1000,1000},{1500,2000,1000},{1000,2000,1000},{1000,1000,1500},{1500,1000,1500},{1500,2000,1500},{1000,2000,1500}},
			{{2500,2000,1000},{2500,0,1000},{2000,0,1000},{2000,2000,1000},{2500,2000,0},{2500,0,0},{2000,0,0},{2000,2000,0}},
			{{2500,2000,1000},{2500,0,1000},{2000,0,1000},{2000,2000,1000},{2500,2000,1500},{2500,0,1500},{2000,0,1500},{2000,2000,1500}},
			{{1500,2000,0},{1500,2000,1000},{1500,3000,1000},{1500,3000,0},{1000,2000,0},{1000,2000,1000},{1000,3000,1000},{1000,3000,0}},
			{{1500,2000,1000},{1500,3000,1000},{1500,3000,1500},{1500,2000,1500},{1000,2000,1000},{1000,3000,1000},{1000,3000,1500},{1000,2000,1500}},
			{{2000,2000,0},{2000,2000,1000},{2000,3000,1000},{2000,3000,0},{1500,2000,0},{1500,2000,1000},{1500,3000,1000},{1500,3000,0}},
			{{2000,2000,0},{2000,2000,1000},{2000,3000,1000},{2000,3000,0},{2500,2000,0},{2500,2000,1000},{2500,3000,1000},{2500,3000,0}},
			{{2000,2000,1000},{2000,3000,1000},{2000,3000,1500},{2000,2000,1500},{1500,2000,1000},{1500,3000,1000},{1500,3000,1500},{1500,2000,1500}},
			{{2000,2000,1000},{2000,3000,1000},{2000,3000,1500},{2000,2000,1500},{2500,2000,1000},{2500,3000,1000},{2500,3000,1500},{2500,2000,1500}}
		};
		
		BOOST_REQUIRE(checkVertices.size() == cf.cfVertices().size());
		for (const auto& i : checkVertices)
		{
			bool found = false;
			for (const auto& j : cf.cfVertices())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find vertex: " << i.transpose() << std::endl; 
			BOOST_REQUIRE(found);
		}
		
		BOOST_REQUIRE(checkLines.size() == cf.cfLines().size());
		for (const auto& i : checkLines)
		{
			bool found = false;
			for (const auto& j : cf.cfLines())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find line: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}

		BOOST_REQUIRE(checkRectangles.size() == cf.cfRectangles().size());
		for (const auto& i : checkRectangles)
		{
			bool found = false;
			for (const auto& j : cf.cfRectangles())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find rectangle: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}
		
		BOOST_REQUIRE(checkCuboids.size() == cf.cfCuboids().size());
		for (const auto& i : checkCuboids)
		{
			bool found = false;
			for (const auto& j : cf.cfCuboids())
			{
				if (i.isSameAs(*j, cf.tolerance()))
				{
					found = true;
					break;
				}
			}
			if (!found) std::cout << "Did not find cuboid: " << i << std::endl; 
			BOOST_REQUIRE(found);
		}
	}
	
BOOST_AUTO_TEST_SUITE_END()
} // namespace spatial_design_test